---
//icons imports
import {
  Mail,
  PhoneCall,
  ChevronDown,
  CircleUserRound,
  Heart,
  Search,
  ShoppingCart,
  Menu,
  X as CloseIcon,
} from "@lucide/astro";

//currency
import {
  DollarSign,
  Euro,
  SaudiRiyal,
  IndianRupee,
  PoundSterling,
} from "@lucide/astro";

//astro components imports
import {
  Dropdown,
  DropdownTrigger,
  DropdownContent,
  DropdownItem,
  DropdownLabel,
  DropdownSeparator,
} from "@/starwind/dropdown";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/starwind/select";

import PageFindSearch from "./blocks/PageFindSearch.astro";
//navigation items
const navItems = [
  {
    name: "Home",
    url: "/",
  },
  {
    name: "Pages",
    url: "/pages",
    subItems: [
      { name: "Services", url: "/pages/services" },
      { name: "Features", url: "/pages/features" },
      { name: "About", url: "/pages/about" },
      { name: "Team", url: "/pages/team" },
      { name: "Careers", url: "/pages/careers" },
      { name: "FAQ", url: "/pages/faq" },
    ],
  },
  {
    name: "Products",
    url: "/products",
    subItems: [
      { name: "Grid", url: "/products/grid" },
      { name: "List", url: "/products/list" },
    ],
  },
  {
    name: "Shop",
    url: "/shop",
  },
  {
    name: "Blog",
    url: "/blog",
  },
  {
    name: "Contact",
    url: "/contact",
  },
];

const currency = [
  {
    name: "USD",
    icon: "DollarSign",
    symbol: "$",
    exchangeRate: 1.0,
  },
  {
    name: "INR",
    icon: "IndianRupee",
    symbol: "₹",
    exchangeRate: 83.2,
  },
  {
    name: "EUR",
    icon: "Euro",
    symbol: "€",
    exchangeRate: 0.92,
  },
  {
    name: "GBP",
    icon: "PoundSterling",
    symbol: "£",
    exchangeRate: 0.78,
  },
  {
    name: "SAR",
    icon: "SaudiRiyal",
    symbol: "﷼",
    exchangeRate: 3.75,
  },
];

const lang = [
  {
    name: "English",
  },
  {
    name: "Arabic",
  },
  {
    name: "French",
  },
  {
    name: "Spanish",
  },
];

// Create a mapping of icon names to components
const iconMap = {
  DollarSign,
  IndianRupee,
  Euro,
  PoundSterling,
  SaudiRiyal,
};
---

<!-- START - Header -->
<header>
  <!-- start - top header -->
  <div class="bg-brand-700 py-4 z-100">
    <div class="xl:container px-4 md:px-6 mx-auto">
      <div class="flex justify-between">
        <!-- start | left list -->
        <nav class="hidden md:block">
          <ul class="flex gap-12 font-medium">
            <li class="inline-flex">
              <a
                href="mailto: contact@hekto.com"
                class="text-white inline-flex gap-2 items-center"
              >
                <Mail class="size-5" />
                <span>contact@hekto.com</span>
              </a>
            </li>
            <li class="inline-flex">
              <a
                href="tel: (12345)67890"
                class="text-white inline-flex gap-2 items-center"
              >
                <PhoneCall class="size-5" />
                <span>(12345)67890</span>
              </a>
            </li>
          </ul>
        </nav>
        <!-- end | left list -->

        <!-- Render in UI -->
        <!-- {
          currency.map((item) => {
            const IconComponent = iconMap[item.icon];
            return <IconComponent class="w-4 h-4 inline mr-2" />;
          })
        } -->

        <!-- start | right list -->
        <nav>
          <ul class="flex gap-5 font-medium">
            <li class="relative inline-flex">
              <select
                name="language"
                id="language-select"
                class="bg-transparent text-white border-0 gap-1 p-0 h-auto tracking-wide focus-visible:outline-none whitespace-nowrap disabled:cursor-not-allowed disabled:border-emerald-300 disabled:bg-emerald-300 disabled:shadow-none"
              >
                {
                  lang.map((item) => (
                    <option value={item.name}>{item.name}</option>
                  ))
                }
              </select>
            </li>
            <li class="relative inline-flex">
              <select
                name="currency"
                id="currency-select"
                class="bg-transparent text-white border-0 gap-1 p-0 h-auto tracking-wide focus-visible:outline-none whitespace-nowrap disabled:cursor-not-allowed disabled:border-emerald-300 disabled:bg-emerald-300 disabled:shadow-none"
              >
                {
                  currency.map((item) => (
                    <option
                      value={item.name}
                      data-symbol={item.symbol}
                      data-exchange={item.exchangeRate}
                    >
                      {item.name} ({item.symbol})
                    </option>
                  ))
                }
              </select>
            </li>
            <li class="inline-flex">
              <a
                href="/auth/login"
                class="text-white font-medium inline-flex gap-2 items-center"
              >
                <span>Login</span>
                <CircleUserRound class="size-5" />
              </a>
            </li>
            <li class="hidden md:inline-flex">
              <a
                href="/wishlist"
                class="text-white font-medium inline-flex gap-2 items-center"
              >
                <span>Wishlist</span>
                <Heart class="size-5" />
              </a>
            </li>
            <li class="inline-flex">
              <a
                href="/checkout"
                class="text-white font-medium inline-flex gap-2 items-center"
              >
                <span>Cart</span>
                <span
                  class="inline-flex items-center text-xs justify-center w-5 h-5 bg-primary-500 text-white rounded-full"
                  id="cartCount"
                >
                </span>
                <ShoppingCart class="size-5" />
              </a>
            </li>
          </ul>
        </nav>
        <!-- start | right list -->
      </div>
    </div>
  </div>
  <!-- end - top header -->

  <!-- start - main header -->
  <div class="py-5">
    <div class="xl:container px-4 md:px-6 mx-auto">
      <div class="flex items-center justify-between" x-data="{toggle: false}">
        <a href="/" class="text-4xl font-heading font-bold text-black">Hekto</a>

        <button @click="toggle = !toggle" class="lg:hidden">
          <Menu class="size-8 ml-4 text-primary-500" />
        </button>
        <nav
          x-show="toggle"
          x-transition:enter="transition-transform duration-300"
          x-transition:enter-start="-translate-x-full"
          x-transition:enter-end="translate-x-0"
          x-transition:leave="transition-transform duration-300"
          x-transition:leave-start="translate-x-0"
          x-transition:leave-end="-translate-x-full"
          class="off-canvas-menu fixed min-h-screen overflow-y-scroll inset-y-0 left-0 z-50 w-full m-0 bg-white p-6 transform space-y-10 md:w-1/2 lg:p-0 lg:bg-transparent lg:overflow-visible lg:min-h-auto lg:block lg:relative lg:w-full lg:translate-x-0 lg:ml-20"
          @click.away="toggle = false"
          @keydown.escape.window="toggle = false"
          style="display: none;"
        >
          <button
            @click="toggle = false"
            class="inline-flex gap-1 text-gray-600 lg:hidden p-2"
          >
            <CloseIcon class="w-6 h-6" />
            Close
          </button>
          <ul class="flex items-center gap-9 font-medium">
            {
              navItems.map((item) =>
                item.subItems ? (
                  <li class="relative inline-flex" x-data="{open: false}">
                    <a
                      href="javascript:void(0)"
                      class="text-ghost-950 transition-colors duration-300 hover:text-primary-500 focus:text-brand-400 inline-flex items-center gap-1"
                      x-on:click="open = ! open"
                      x-on:keydown.escape.window="open = false"
                      x-on:click.outside="open = false"
                    >
                      {item.name}
                      <ChevronDown class="size-5" />
                    </a>
                    <ul
                      class="absolute left-0 top-full mt-2 min-w-[180px] p-2 bg-white rounded shadow-xl z-20"
                      x-bind:class="! open ? 'hidden' : ''"
                      x-transition:enter="transition ease-out duration-200"
                      x-transition:enter-start="opacity-0"
                      x-cloak
                    >
                      {item.subItems.map((sub) => (
                        <li>
                          <a
                            href={sub.url}
                            class="block px-4 py-2 text-ghost-950 hover:text-primary-500 hover:bg-slate-50 transition-colors duration-300"
                          >
                            {sub.name}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </li>
                ) : (
                  <li class="inline-flex">
                    <a
                      href={item.url}
                      class="text-ghost-950 transition-colors duration-300 hover:text-primary-500 focus:text-brand-400"
                    >
                      {item.name}
                    </a>
                  </li>
                )
              )
            }
          </ul>
        </nav>
        <!-- <PageFindSearch class="ml-20" /> -->
        <form action="" class="ml-auto hidden md:flex">
          <label for="search" class="sr-only">Enter keywords to search</label>
          <input
            type="text"
            class="form-input border border-slate-200 rounded-s-sm px-4 py-3"
            placeholder="Search"
            id="search"
          />
          <button
            type="button"
            class="inline-block bg-primary-500 py-2 px-4 text-white"
          >
            <Search class="size-6" />
          </button>
        </form>

        <!-- Overlay for mobile -->
        <div
          x-show="toggle"
          x-transition.opacity
          class="off-canvas-menu__backdrop"
          @click="toggle = false"
          style="display: none;"
        >
        </div>
      </div>
    </div>
    <!-- end - main header -->
  </div>
  <!-- END - Header -->

  <script>
    import { cartCount } from "@/stores/cart";
    import { configStore, updateConfig } from "@/stores/config";

    // Listen to changes in the store, and show/hide the dialog accordingly
    function updateCartCount(count) {
      const cartCountElem = document.getElementById("cartCount");
      if (cartCountElem) {
        if (count > 0) {
          cartCountElem.style.display = "inline-flex";
          cartCountElem.textContent = count.toString();
        } else {
          cartCountElem.style.display = "none";
          cartCountElem.textContent = "";
        }
      }
    }

    cartCount.subscribe((count) => {
      console.log("Cart count updated:", count);
      updateCartCount(count);
    });

    // Run once after Astro page rendered
    if (typeof window !== "undefined") {
      document.addEventListener("astro:page-load", () => {
        updateCartCount(cartCount.get());
      });
    }

    function updateConfigUI(config) {
      const currencySelect = document.getElementById("currency-select");
      const langSelect = document.getElementById("language-select");

      if (config.currency && currencySelect.length) {
        currencySelect.value = config.currency;
      }

      if (config.lang && langSelect.length) {
        langSelect.value = config.lang;
      }
    }

    //Listen changes
    configStore.subscribe(() => {
      updateConfigUI(configStore.get());
    });

    // Run once after Astro page rendered
    if (typeof window !== "undefined") {
      document.addEventListener("astro:page-load", () => {
        updateConfigUI(configStore.get());
      });
    }

    document
      .querySelector("#language-select")
      ?.addEventListener("change", (event) => {
        const selectedLanguage =
          event.target && event.target.value ? event.target.value : "";
        configStore.set({ ...configStore.get(), lang: selectedLanguage });
      });

    document
      .querySelector("#currency-select")
      ?.addEventListener("change", (event) => {
        const selectedOption = event.target.selectedOptions[0];

        //selected currency information
        const selectedCurrency =
          event.target && event.target.value ? event.target.value : "";

        //selected currency exchange rate
        const selectedCurrencyExchange =
          selectedOption && selectedOption.dataset.exchange
            ? selectedOption.dataset.exchange
            : "";
        //selected currency symbol
        const selectedCurrencySymbol =
          selectedOption && selectedOption.dataset.symbol
            ? selectedOption.dataset.symbol
            : "";
        //update currency information
        configStore.set({
          ...configStore.get(),
          currency: selectedCurrency,
          currencySymbol: selectedCurrencySymbol,
        });
      });
  </script>
</header>
