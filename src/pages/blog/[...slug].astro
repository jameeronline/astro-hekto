---
//astro imports
import { Image } from "astro:assets";
import { Breadcrumbs } from "astro-breadcrumbs";
import { getCollection, getEntry, render } from "astro:content";
import { Icon } from "astro-icon/components";

//components import
import BlogLayout from "@/layouts/BlogLayout.astro";
import PageHeader from "@/components/blocks/PageHeader.astro";
// import BlogAside from "@blocks/BlogAside.astro";
// import BlogGrid from "@blocks/BlogGrid.astro";
// import Badge from "@components/ui/Badge.astro";
// import BackButton from "@components/BackButton.astro";
// import RelatedBlogCard from "@components/RelatedBlogCard.astro";

import { Badge } from "@/starwind/badge";

//icons import
import { ArrowLeft } from "@lucide/astro";

//vendor style imports
// import "astro-breadcrumbs/breadcrumbs.css";

//utils import
import { slugify, formatDate } from "@/utils/helper";
import BlogMeta from "@/components/blocks/BlogMeta.astro";

//define static paths for dynamic routing
export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: slugify(post.data.title) },
    props: { id: post.id, posts: posts },
  }));
}

const { slug } = Astro.params;
const { id, posts } = Astro.props;

// Fetch the post entry using the ID from the dynamic route
const post = await getEntry("posts", id);

// If the post is not found, throw an error
if (!post) {
  throw new Error("Post not found");
}

// Extract data and content from the post
const { data } = post;
const { Content, headings } = await render(post);

const tags = data.tags.map((tag) => tag.trim());
const categories = data.categories.map((category) => category.trim());

// Get related posts: share at least one tag or category, exclude current post
const relatedPosts = posts
  .filter(
    (p) =>
      p.id !== post.id &&
      (p.data.tags.some((tag) => tags.includes(tag.trim())) ||
        p.data.categories.some((cat) => categories.includes(cat.trim())))
  )
  .slice(0, 4); // Limit to 4

//access data properties
const { title, description, cover, pubDate, author } = data;

// page header details
const pageHeader = {
  title: "Blog Details",
  caption: "",
  description: "",
};
---

<BlogLayout title={title}>
  <PageHeader headerInfo={pageHeader} slot="pageHeader" />
  <article class="rounded-xl transition-all" data-scroll-animate>
    <header class="mb-8" data-scroll-animate>
      <BlogMeta categories={categories} post={data} />

      <h1
        class="mb-0 text-2xl font-bold leading-snug text-tertiary-900 lg:text-4xl dark:text-slate-100"
      >
        {title}
      </h1>
    </header>

    <div
      class="relative overflow-hidden bg-cover bg-no-repeat rounded-md mb-8"
      data-scroll-animate
    >
      <Image
        class="object-cover object-center aspect-video w-full bg-slate-50 transition duration-300 ease-in-out dark:bg-transparent"
        src={cover.image}
        alt={cover.alt || title}
        format="webp"
        loading="lazy"
        width={1600}
        height={900}
      />
    </div>

    <p
      class="leading-relaxed text-xl lg:text-2xl mb-10 text-emphasis-800 line-clamp-3 dark:text-slate-400"
      data-scroll-animate
    >
      {description}
    </p>

    <div
      class="prose prose-custom lg:prose-lg max-w-none dark:prose-invert"
      data-scroll-animate
    >
      <Content />
    </div>
  </article>

  {
    tags.length > 0 && (
      <div class="mt-8" slot="sidebar">
        <h4 class="mb-4 text-xl font-heading font-semibold leading-snug text-tertiary-900 lg:text-2xl dark:text-slate-100">
          Tags
        </h4>
        <div class="flex gap-8 flex-wrap">
          {tags.map((tag) => (
            <a
              href={`/blog/tag/${slugify(tag)}`}
              aria-label={`View posts tagged ${tag}`}
              class="capitalize underline text-lg hover:text-primary-700 transition-colors duration-300"
            >
              {tag}
            </a>
          ))}
        </div>
      </div>
    )
  }

  <!-- <header
      class="prose dark:prose-invert max-w-none lg:prose-lg prose-h1:leading-[1.2] prose-h1:mb-4 md:prose-h1:mb-4 prose-p:my-2 mb-8"
    >
      <div
        class="grid grid-cols-4 gap-6 md:grid-cols-8 md:gap-12 lg:grid-cols-12"
      >
        <div class="col-span-4 md:col-span-12 text-center">
          <h1
            class="mb-2 text-xl font-heading font-semibold leading-snug text-tertiary-900 lg:text-3xl dark:text-slate-100"
            data-scroll-animate
          >
            {title}
          </h1>

          <p class="text-gray-500 text-sm" data-scroll-animate>
            Written by {author} on {formatDate(pubDate)}
          </p>
        </div>
      </div>
    </header> -->
  <!-- <section>
      <figure data-scroll-animate>
            <div class="relative">
              <Image
                src={image.url}
                alt={title}
                width={1600}
                height={900}
                class="w-full rounded-xl object-cover object-center"
              />
            </div>
            <figcaption class="sr-only">{image.alt}</figcaption>
          </figure> -->

  <!-- Summary -->
  <!-- <p class="text-xl md:text-2xl text-gray-600 my-10" data-scroll-animate>
      {description}
    </p> -->

  <!-- <div
      class="prose lg:prose-lg max-w-none dark:prose-invert"
      data-scroll-animate
    >
      <Content />
    </div>
  </section> -->
  <!-- {
      relatedPosts.length > 0 && (
        <footer class="my-16">
          <h3 class="text-xl font-bold mb-8">Related Posts</h3>
          <div class="grid grid-cols-4 gap-6 md:grid-cols-8 md:gap-10 lg:grid-cols-12">
            {relatedPosts.map((post) => (
              <RelatedBlogCard
                post={post}
                url={slugify(post.data.title)}
                data-scroll-animate
              />
            ))}
          </div>
        </footer>
      )
    } -->
</BlogLayout>
