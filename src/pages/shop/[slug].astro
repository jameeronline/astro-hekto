---
//astro imports
import { getCollection, getEntry, getEntries, render } from "astro:content";

import { Image } from "astro:assets";

import BaseLayout from "@/layouts/BaseLayout.astro";

//blocks import
import PageHeader from "@/components/blocks/PageHeader.astro";
import Partners from "@/components/blocks/Partners.astro";
import RelatedProduct from "@/components/blocks/product-detail/RelatedProduct.astro";

//components import
import { Button } from "@/starwind/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/starwind/tabs";

//icons import
import { Heart, Star, Facebook, Twitter, Instagram } from "@lucide/astro";

//utility import
import { slugify } from "@/utils/helper";
import { date } from "astro:schema";

// Generate static paths for each product based on its slug
export async function getStaticPaths() {
  const furnitureCollection = await getCollection("furnitureCollections");

  return furnitureCollection.map((product) => ({
    params: {
      slug: slugify(product.data.title),
    },
    props: { id: product.id, product: product },
  }));
}

// Find the product matching the slug param
const { slug } = Astro.params;
const { id, product } = Astro.props;
const data = product.data;

let categoryDetails: Awaited<ReturnType<typeof getEntries>> = [];
let tags: string[] = Array.isArray(data?.tags) ? data.tags : [];

// Fetch category details for the product's categories
if (Array.isArray(data?.categories) && data?.categories.length > 0) {
  categoryDetails = await getEntries(data?.categories);
}

// if (data.categories && data.categories.length > 0) {
//   // Fetch category details for each category in the product

//   const categoryItems = data?.categories.map(async (category) => {
//     console.log("Fetching category:", category);
//     return await getEntry("productCategories", slugify(category));
//   });

//   // Wait for all category details to be fetched
//   categoryDetails = await getEntries("productCategories", categoryItems);

//   // Filter out any nulls in case a category was not found
//   console.log("Category entry:", categoryDetails);
// }

//related products
// const productsCollection = await getCollection("products");

// Find related products by matching at least one category or tag, excluding the current product
// const relatedProducts = productsCollection
//   .filter((product) => {
//     if (product.data.name === data.name) return false;
//     // const hasCategory =
//     //   data.categories &&
//     //   product.data.categories &&
//     //   product.data.categories.some((cat) => data.categories.includes(cat));
//     const hasTag =
//       data.tags &&
//       product.data.tags &&
//       product.data.tags.some((tag) => data.tags.includes(tag));
//     // return hasCategory || hasTag;
//     return hasTag;
//   })
//   .slice(0, 4) // Limit to 4 related products
//   .map((product) => ({
//     id: product.data.id,
//     name: product.data.name,
//     price: product.data.salePrice || product.data.originalPrice,
//     image: product.data.image || "/placeholder.svg?height=200&width=200",
//     rating: product.data.rating || 5,
//   }));

if (!data) {
  throw new Error(`Product not found for slug: ${slug}`);
}

// Extract data and content from the post
const { Content, headings } = await render(product);

// page header details
const pageHeader = {
  title: "Products Details Layout",
  caption: "",
  description: "",
};

// Remove the renderStars function from the script section.
// Instead, render stars directly in the template using an array and .map().
---

<BaseLayout>
  <PageHeader headerInfo={pageHeader} slot="pageHeader" />

  <div class="">
    <div class="bg-white">
      <div class="container--default">
        {/* Product Detail Section */}
        <div
          class="bg-white rounded-lg p-6 shadow-[0px_0px_32px_0px_rgba(0,0,0,0.08)]"
        >
          <div class="grid lg:grid-cols-12 gap-8">
            {/* Thumbnail Images */}
            <div class="lg:col-span-2 space-y-4">
              {
                data.galleryImages.map((image, index) => (
                  <a
                    href={image}
                    data-fancybox="gallery"
                    data-caption="Product Thumbnail images"
                    class="flex bg-gray-100 aspect-square rounded-lg p-2"
                    key={index}
                  >
                    <Image
                      src={data.featuredImage || "/placeholder.svg"}
                      alt={`Thumbnail ${index + 1}`}
                      class="w-full h-full object-contain scale-75 hover:scale-100 transition-transform duration-200"
                      width={80}
                      height={80}
                      loading="lazy"
                      decoding="async"
                      format="webp"
                    />
                  </a>
                ))
              }
            </div>

            {/* Main Product Image */}
            <div class="lg:col-span-5">
              <div
                class="w-full aspect-square bg-gray-100 rounded-lg p-8 flex items-center justify-center"
              >
                <Image
                  src={data.featuredImage || "/placeholder.svg"}
                  alt={data.title || "Product Image"}
                  class="w-full h-full object-contain"
                  width={600}
                  height={600}
                  loading="lazy"
                  decoding="async"
                  format="webp"
                />
              </div>
            </div>

            {/* Product Information */}
            <div class="lg:col-span-5 space-y-6 lg:py-10">
              <div>
                <h1 class="text-3xl font-semibold text-tertiary-900 mb-2">
                  {data.title || "Product Name"}
                </h1>
                <div class="flex items-center space-x-3 mb-6">
                  <div class="flex items-center space-x-2 mb-4">
                    <div class="flex">
                      {[...Array(5)].map((_, i) => <Star class="w-6 h-6" />)}
                    </div>
                    <span class="text-sm text-gray-500">(23)</span>
                  </div>
                </div>
                <div class="flex items-center space-x-3 mb-6">
                  <span class="text-2xl font-heading text-tertiary-900"
                    >${data.price}</span
                  >
                  <span class="text-sm text-primary-500 line-through"
                    >${data.price}</span
                  >
                </div>
              </div>

              <div class="space-y-6">
                <div>
                  <span
                    class="text-lg font-heading font-semibold text-tertiary-900"
                    >Color</span
                  >
                  <p class="text-gray-600 leading-relaxed">
                    {data.color}
                  </p>
                </div>

                <div class="flex items-center space-x-4">
                  <Button class="btn--primary" id="addToCart"
                    >Add To Cart</Button
                  >
                  <Button variant="outline" size="icon" class="px-4">
                    <Heart class="h-6 w-6 text-gray-600" />
                  </Button>
                </div>

                <div class="space-y-4">
                  <div>
                    <span
                      class="text-lg font-heading font-semibold text-tertiary-900"
                      >Categories</span
                    >
                    <ul class="flex flex-wrap gap-2 mt-2">
                      {
                        categoryDetails && categoryDetails.length > 0 ? (
                          categoryDetails.map((category) => (
                            <li key={category.id}>
                              <a
                                href={`/shop/category/${category.id}`}
                                class="text-primary-600 hover:underline text-sm capitalize"
                              >
                                {category.data.name}
                              </a>
                            </li>
                          ))
                        ) : (
                          <li class="text-gray-400 text-sm">No categories</li>
                        )
                      }
                    </ul>
                  </div>
                  <div>
                    <span
                      class="text-lg font-heading font-semibold text-tertiary-900"
                      >Tags</span
                    >
                    <ul class="flex flex-wrap gap-2 mt-2">
                      {
                        tags && tags.length > 0 ? (
                          tags.map((tag) => (
                            <li key={tag}>
                              <a
                                href={`/shop/tag/${slugify(tag)}`}
                                class="text-primary-600 hover:underline text-sm capitalize"
                              >
                                {tag}
                              </a>
                            </li>
                          ))
                        ) : (
                          <li class="text-gray-400 text-sm">No tags</li>
                        )
                      }
                    </ul>
                  </div>
                  <div class="flex items-center space-x-3">
                    <span
                      class="text-lg font-heading font-semibold text-tertiary-900"
                      >Share</span
                    >
                    <div class="flex space-x-2">
                      <Button variant="ghost" size="sm" class="p-1">
                        <Facebook class="h-4 w-4 text-tertiary-600" />
                      </Button>
                      <Button variant="ghost" size="sm" class="p-1">
                        <Instagram class="h-4 w-4 text-primary-500" />
                      </Button>
                      <Button variant="ghost" size="sm" class="p-1">
                        <Twitter class="h-4 w-4 text-tertiary-400" />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Product Details Tabs */}
    <div class="mb-16 bg-tertiary-50">
      <div class="container--default">
        <!-- Alpine.js Tabs Example -->
        <div x-data="{ tab: 'description' }" class="mb-8">
          <div class="flex gap-16">
            <button
              :class="tab === 'description' ? 'underline underline-offset-4 text-tertiary-900' : 'text-tertiary-900'"
              class="pb-4 text-2xl font-heading font-medium bg-transparent focus:outline-none"
              @click="tab = 'description'"
              type="button"
            >
              Description
            </button>
            <button
              :class="tab === 'additional' ? 'underline text-tertiary-900' : 'text-tertiary-900'"
              class="pb-4 text-2xl font-heading font-medium bg-transparent focus:outline-none"
              @click="tab = 'additional'"
              type="button"
            >
              Additional Info
            </button>
            <button
              :class="tab === 'reviews' ? 'underline text-tertiary-900' : 'text-tertiary-900'"
              class="pb-4 text-2xl font-heading font-medium bg-transparent focus:outline-none"
              @click="tab = 'reviews'"
              type="button"
            >
              Reviews
            </button>
            <button
              :class="tab === 'video' ? 'underline text-tertiary-900' : 'text-tertiary-900'"
              class="pb-4 text-2xl font-heading font-medium bg-transparent focus:outline-none"
              @click="tab = 'video'"
              type="button"
            >
              Video
            </button>
          </div>
          <div class="mt-8">
            <div x-show="tab === 'description'">
              <div
                class="prose prose-custom prose-headings:text-emphasis-800 max-w-none dark:prose-invert"
              >
                <Content />
              </div>
            </div>
            <div
              x-show="tab === 'additional'"
              class="prose prose-custom lg:prose-lg prose-table:border-0 prose-tr:border-0 prose-th:border-0 prose-td:border-0"
            >
              {
                data.specifications &&
                Object.keys(data.specifications).length > 0 ? (
                  <table class="min-w-full divide-y divide-gray-200 text-sm">
                    <tbody>
                      {Object.entries(data.specifications).map(
                        ([key, value]) => (
                          <tr>
                            <td class="py-2 pr-4 font-medium text-tertiary-900 capitalize">
                              {key.replace(/_/g, " ")}
                            </td>
                            <td class="py-2 text-gray-700">{value}</td>
                          </tr>
                        )
                      )}
                    </tbody>
                  </table>
                ) : (
                  <p class="text-gray-600">
                    No additional specification details available.
                  </p>
                )
              }
            </div>
            <div x-show="tab === 'reviews'">
              {
                data.reviews && data.reviews.length > 0 ? (
                  <div class="space-y-8">
                    {data.reviews.map((review, idx) => (
                      <div
                        key={idx}
                        class={`pb-6${idx !== data.reviews.length - 1 ? " border-b" : ""}`}
                      >
                        <div class="flex items-center mb-2">
                          <span class="font-semibold text-tertiary-900 mr-2">
                            {review.reviewer || "Anonymous"}
                          </span>
                          <span class="text-xs text-gray-500">
                            {review.date || ""}
                          </span>
                        </div>
                        <div class="flex items-center mb-2">
                          {[...Array(review.rating || 0)].map((_, i) => (
                            <Star class="w-4 h-4 text-yellow-400" key={i} />
                          ))}
                          {[...Array(5 - (review.rating || 0))].map((_, i) => (
                            <Star
                              class="w-4 h-4 text-gray-300"
                              key={i + (review.rating || 0)}
                            />
                          ))}
                        </div>
                        <p class="text-gray-700">{review.text}</p>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p class="text-gray-600">No reviews yet.</p>
                )
              }
            </div>
            <div x-show="tab === 'video'">
              {
                data.video ? (
                  <div class="aspect-w-16 aspect-h-9">
                    <iframe
                      src={`https://www.youtube.com/embed/${data.video}`}
                      title="Product Video"
                      frameborder="0"
                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                      allowfullscreen
                      class="w-full h-full rounded-lg"
                    />
                  </div>
                ) : (
                  <p class="text-gray-600">
                    Product videos would be embedded here.
                  </p>
                )
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Related Products Section */}
    <!-- <div class="container--default py-6">
      <h4 class="mb-8">Related Products</h4>
      <div class="grid grid-cols-4 md:grid-cols-8 lg:grid-cols-12 gap-6">
        {relatedProducts.map((product) => <RelatedProduct product={product} />)}
      </div>
    </div> -->

    {/* Company Logos Section */}
    <Partners />
  </div>
</BaseLayout>

<script>
  import { addToCart } from "@/stores/cart";
  // import { Fancybox } from "@fancyapps/ui/dist/fancybox/";
  // import { Carousel } from "@fancyapps/ui/dist/carousel/";
  // import { Thumbs } from "@fancyapps/ui/dist/carousel/carousel.thumbs.js";

  // const container = document.getElementById("myCarousel");
  // const options = {
  //   // Your custom options
  //   Dots: false,
  // };

  // Carousel(container, options, { Thumbs }).init();

  // Fancybox.bind("[data-fancybox=gallery]", {
  //   // Your custom options
  // });

  // Set the store to true when the button is clicked
  function updateCart() {
    addToCart();
  }

  // Add an event listener to the button
  document.getElementById("addToCart")?.addEventListener("click", updateCart);
</script>
